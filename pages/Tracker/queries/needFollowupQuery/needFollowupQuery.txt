WITH orders AS ( 
	SELECT 
	merchant_id, 
	MIN(sorted_at) AS first_order_date, 
	COUNT(CASE WHEN sorted_at >= CURRENT_DATE - 1 THEN consignment_id END) AS last_day_order, 
	COUNT(consignment_id) AS order_count
	FROM remote_hermes.orders
	WHERE date(sorted_at) >= '2025-02-01'
	GROUP BY merchant_id
),

merchants AS ( 
	SELECT *
	FROM remote_hermes.merchants
),
stores AS ( 
	SELECT merchant_id, COUNT(id) AS store_count
	FROM remote_hermes.stores
	GROUP BY 1
),
defining_status AS (
	SELECT 
	no.id,
	business_name,
	business_owner_name,
	estimated_volume,
	ro.first_order_date,
	ro.last_day_order,
	st.name AS product_category_name,
	no.phone,
	website,
	rm.id as merchant_id,
	no.created_at,
	no.updated_at,
	stt.name AS competitor_name,
	btu.user_name AS business_team_user_name,
	status,
	CASE 
	WHEN rm.phone IS NOT NULL THEN TRUE 
	ELSE FALSE 
	END AS is_registered_merchant,
	CASE 
	WHEN rs.store_count > 0 THEN TRUE 
	ELSE FALSE 
	END AS is_store_created,
	CASE 
	WHEN rm.active_payment_method IS NOT NULL THEN TRUE 
	ELSE FALSE 
	END AS is_payment_method_active,
	CASE 
	WHEN ro.order_count > 0 THEN TRUE 
	ELSE FALSE 
	END AS is_order_created
	FROM 
	new_onboards no
	LEFT JOIN merchants rm ON no.phone = rm.phone
	LEFT JOIN stores rs ON rs.merchant_id = rm.id
	LEFT JOIN orders ro ON ro.merchant_id = rm.id 
	LEFT JOIN static_values st ON st.id = CAST(NULLIF(no.product_category_id, '') AS INT)
	LEFT JOIN static_values stt ON stt.id = CAST(NULLIF(no.product_category_id, '') AS INT)
	LEFT JOIN business_team_users btu ON btu.id = CAST(NULLIF(no.business_team_user_id, '') AS INT)
	WHERE btu.id = '{{this.params.user_id}}'
	and no.status in ('Active')
),
current_status AS (
	SELECT *, 
	CASE
	-- Check if the merchant is ongoing
	WHEN is_registered_merchant = TRUE AND is_store_created = TRUE AND is_payment_method_active = TRUE AND is_order_created = TRUE THEN 
	CASE 
	-- If ongoing and needs followup (estimated_volume > last_day_order)
	WHEN estimated_volume > last_day_order THEN 'need_followup'
	ELSE 'ongoing_merchant'
	END

	-- Other conditions for the status
	WHEN is_registered_merchant = FALSE AND is_store_created = FALSE AND is_payment_method_active = FALSE AND is_order_created = FALSE THEN 'registration_pending'
	WHEN is_registered_merchant = TRUE AND (is_store_created = FALSE OR is_payment_method_active=FALSE) THEN 'info_pending'
	WHEN is_registered_merchant = TRUE AND is_store_created = TRUE AND is_payment_method_active=TRUE AND is_order_created = FALSE THEN 'info_uploaded_order_pending'
	ELSE 'none'
	END AS current_status
	FROM defining_status
)
SELECT 
			id,
    Phone,
			merchant_id,
    business_name, 
    business_owner_name, 
    product_category_name,
    created_at,
		status
FROM current_status
WHERE current_status = '{{this.params.status}}';